
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: arabic_smart_scribe
      POSTGRES_USER: scribe_user
      POSTGRES_PASSWORD: scribe_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scribe_user -d arabic_smart_scribe"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - scribe_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - scribe_network

  # FastAPI Backend (التطبيق الرئيسي)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    environment:
      - DATABASE_URL=postgresql://scribe_user:scribe_password@postgres:5432/arabic_smart_scribe
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-default-secret-key}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - scribe_network

  # Flask Agent Studio
  agent-studio:
    build:
      context: .
      dockerfile: Dockerfile.flask
    environment:
      - DATABASE_URL=postgresql://scribe_user:scribe_password@postgres:5432/arabic_smart_scribe
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-default-secret-key}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - scribe_network

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: celery -A app.celery worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://scribe_user:scribe_password@postgres:5432/arabic_smart_scribe
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-default-secret-key}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - backend
    restart: unless-stopped
    networks:
      - scribe_network

  # Celery Beat (المهام المجدولة)
  beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://scribe_user:scribe_password@postgres:5432/arabic_smart_scribe
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-default-secret-key}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - scribe_network

  # Frontend React App
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    environment:
      - REACT_APP_API_URL=http://localhost
      - REACT_APP_WS_URL=ws://localhost/ws
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - scribe_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    depends_on:
      - backend
      - agent-studio
      - frontend
    restart: unless-stopped
    networks:
      - scribe_network

  # Celery Flower (مراقبة المهام)
  flower:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: celery -A app.celery flower --port=5555
    environment:
      - REDIS_URL=redis://redis:6379
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - scribe_network

volumes:
  postgres_data:
  redis_data:

networks:
  scribe_network:
    driver: bridge
