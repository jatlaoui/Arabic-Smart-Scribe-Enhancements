from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import uuid

# --- Request Schemas ---

class SeriesPlanRequest(BaseModel):
    project_id: str
    num_episodes: int
    target_episode_duration: int # in minutes
    series_title_suggestion: Optional[str] = None

# --- Response Schemas ---
# These will mirror the structure of the data returned after saving to DB,
# including IDs generated by the database.

class EpisodeOutlineBase(BaseModel):
    episode_number: int
    title: str
    logline: str
    key_events_json: str # JSON string of event descriptions
    cliffhanger_description: Optional[str] = None

class EpisodeOutlineResponse(EpisodeOutlineBase):
    id: uuid.UUID
    series_outline_id: uuid.UUID

    class Config:
        orm_mode = True # Pydantic V1 style, or from_attributes = True for V2

class SeriesOutlineBase(BaseModel):
    project_id: str # Should come from the linked Project model
    series_title: Optional[str] = None
    total_episodes: int
    target_episode_duration_minutes: Optional[int] = None

class SeriesOutlineResponse(SeriesOutlineBase):
    id: uuid.UUID
    episodes: List[EpisodeOutlineResponse] = []

    class Config:
        orm_mode = True # Pydantic V1 style, or from_attributes = True for V2

# Schema for the actual data structure returned by SeriesPlannerService,
# before it's saved to the database (so no DB IDs yet).
# This might be useful for type hinting within the service or endpoint before DB commit.
class GeneratedEpisodeOutline(BaseModel):
    episode_number: int
    title: str
    logline: str
    key_events_json: str # JSON string of event descriptions
    cliffhanger_description: Optional[str] = None

class GeneratedSeriesPlan(BaseModel):
    series_title: Optional[str] = None
    total_episodes: int
    target_episode_duration_minutes: Optional[int] = None
    episodes: List[GeneratedEpisodeOutline] = []
